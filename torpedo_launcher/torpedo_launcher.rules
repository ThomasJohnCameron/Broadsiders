Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/TorpedoLauncher"
	IconNameKey = "Parts/TorpedoLauncherIcon"
	ID = twrecks.torpedo_launcher // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [torpedo_launcher]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/TorpedoLauncherDesc"
	Resources
	[
		[steel, 400]
		[coil2, 60]
		[tristeel, 60]
	]
	IsFlippable = true
	TypeCategories = [weapon, uses_missiles, is_crewed]
	Size = [3, 4]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "missiles"
	MaxHealth = 13000
	InitialPenetrationResistance = 3
	ProhibitRects
	[
		[default, [1, -2, 2, 2]]
	]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	BlockedTravelCells
	[
		[0, 0]
		[1, 0]
		[2, 0]
        [1, 1]
        [2, 1]
    ]
    BlockedTravelCellDirections
    [
        {
            Key = [0, 3]
            Value = [Down, Right]
        }
	]
	AllowedDoorLocations
	[
		[-1, 2]
		[3, 2]
		[1,4]
	]
	ForceManhattanPathInPart = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [50, 90]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 12
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		LoadedMissileParts
		{
			Type = ResourceStorage
			ResourceType = missile_part_nuke
			MaxResources = 20
			DelayBeforeReadyToUse = .25
			AnticipateMoreResourcesFrom = ["MissileStorage"]
			ToggleOnResources = 20
			ToggleOffResources = 0
			UITileRect = [1 + 7/64, .4 + 7/64, 1 - 14/64, 1 - 14/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
			DropResourcesWhenDestroyed = true
		}
		MissileStorage
		{
			Type = TypedResourceGrid
			ResourceType = missile_part_nuke
			GridRect = [1, 3, 2, 1]
			Layer = "doodads_low"
			SpriteInset = [11/64, 0/64, 0/64, 0/64]
		}
		Consumer
		{
			Type = ResourceConsumer
			ResourceType = missile_part_nuke
			Storage = MissileStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			OverridePriorityKey = MissileStorage
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}

		AmmoPrereq
		{
			Type = MultiResourceStorage
			ResourceType = bullet
			ResourceStorages = [LoadedMissileParts, MissileStorage]
			ToggleOnResources = 4
			ToggleOffResources = 3
		}
		MissileLoader
		{
			Type = ResourceConverter
			FromStorage = MissileStorage
			ToStorage = LoadedMissileParts
			FromQuantity = 1
			ToQuantity = 1
			Interval = 0.72
		}

		BaseEmitter
		{
			Type = BulletEmitter
			ChainedTo = Weapon
			FireTrigger
			GetTargetFrom = Weapon
			Location = [1, 0]
			OperationalToggle = IsOperational
			Bullet = &<torpedo/torpedo.rules>
			Spread = [0.1d, 0.1d]
			ResourceStorage = LoadedMissileParts
			ResourcesUsed = 10
			Recoil = 500
		}
        Emitter1 : BaseEmitter
        {
            Location = [1, 0.2]
            FireTrigger = ShootLeftTrigger
            ResourceStorage = LoadedMissileParts
        }
        Emitter2 : BaseEmitter
        {
            Location = [1, -0.5]
            FireTrigger = ShootRightTrigger
            ResourceStorage = LoadedMissileParts
        }

		FireTimer
		{
			Type = Timer
			OperationalToggle = IsOperational
			Duration = 60
			AutoStart = true
			StartTrigger = Weapon
		}
		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = FireTimer
			Invert = true
		}
		ShootLeftTrigger
		{
			Type = TriggerProxy
			ComponentID = Weapon
		}
		ShootRightTrigger
		{
			Type = TriggerProxy
			ComponentID = Weapon
		}

		Weapon
		{
			Type = FixedWeapon
			Location = [2, -2]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			FireInterval = 60
			AIFirepowerRating = 7500
			FirePermissionToggle = FireModeToggle
			AutoFireToggle = AutoFireToggle
			Emitter = BaseEmitter
			AutoTarget
			{
				TargetType = ShipParts
				Toggle = AutoTargetToggle
			}
			CoverageLine
			{
				LineSprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 191]
					UVRect = [.5, 0, 0, 1]
				}
				LineThickness = 2
				BeginCapSprite : LineSprite
				{
					UVRect = [0, 0, .5, 1]
				}
				BeginCapSize = [1, 2]
				EndCapSprite : LineSprite
				{
					UVRect = [.5, 0, .5, 1]
				}
				EndCapSize = [1, 2]
			}
		}

		BarrelGraphics
		{
			Type = Graphics
			ChainedTo = Weapon
			Location = [-3.5, -0.5]
			Rotation = 90d
			ResetAnimationTrigger = Weapon

			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"barrel3.png"
							"barrel4.png"
							"barrel4.png"
							"barrel4.png"
							"barrel1.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							"barrel_normals.png"
							"barrel_normals.png"
							"barrel_normals.png"
							"barrel_normals.png"
							"barrel_normals.png"
						]
						Size = [3, 5]
						AnimationInterval = 15
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
				]
			}
		}
		Graphics
		{
			Type = Graphics
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 5]
					}
					{
						File = "floor_33.png"
						Size = [3, 5]
					}
					{
						File = "floor_66.png"
						Size = [3, 5]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.09375]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"console_on1.png"
							"console_on2.png"
							"console_on3.png"
							"console_on4.png"
							"console_on5.png"
						]
						Size = [3, 5.32]
						AnimationInterval = 0.15
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 5]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 5]
					}
					{
						File = "walls_33.png"
						Size = [3, 5]
					}
					{
						File = "walls_66.png"
						Size = [3, 5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 5]
					}
					{
						File = "roof.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 5]
					}
					{
						File = "roof.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 5]
					}
				]
			}
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of ammo.
				{
					Toggle = AmmoPrereq
					Delay = 5
					AtlasSprite
					{
						File = &/INDICATORS/NoNuke
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		FireEffect1
		{
			Type = TriggeredEffects
			ChainedTo = Emitter1
			Trigger = Emitter1
			Location = [0, 0]

			MediaEffects
			[
				&<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot.rules>
				&<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "torpedo_launch.wav"
					SpeedVariation = .25
				}
			]
		}

		FireEffect2 : FireEffect1
		{
			ChainedTo = Emitter2
			Trigger = Emitter2
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.6, 2.1]
			Rotation = 0d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [0.6, 2.9]
			Rotation = 90d
		}
		CrewLocation3
		{
			Type = CrewLocation
			Location = [0.6, 3.5]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 3
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [AmmoPrereq]
			CrewDestinations
			[
				[0.6, 2.1]
				[0.6, 2.9]
				[0.6, 3.5]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
				CrewLocation3
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 1.5]
		}


		Blueprints
		{
			Type = BlueprintSprite
			File = "icon.png"
			Size = [3, 5]
			Offset = [0, -0.5]
		}
	}
}

//	TorpedoStats
//	{
//		NameKey = "StatCategories/MissileNuke"
//		Stats
//		{
//			DamagePerShot = &~/Components/Emitter/Bullet/Stage2/Components/Hit/HitOperational/HitEffects/0/TotalDamage
//			DamagePerSecond = (&DamagePerShot) * (&ROF)
//			MaxDamage = [&../DamagePerShot, &../DamagePerSecond]
//			DamageArea = &~/Components/Emitter/Bullet/Stage2/Components/Hit/HitOperational/HitEffects/0/Radius
//			ROF = 1 / (&<../missile_launcher.rules>/Part/Components/CommonReloadTimerLong/Duration)
//			Range = &~/Components/Emitter/Bullet/Range
//			Arc = deg(&~/Components/Weapon/ValidArc)
//			ShotLaunchSpeed = &~/Components/Emitter/Bullet/Speed
//			Acceleration = &~/Components/Emitter/Bullet/Stage2/Components/BoostAcceleration/Acceleration
//			AccelerationDelay = &~/Components/Emitter/Bullet/Components/DeployDeath/Lifetime
//			ShotHP = &~/Components/Emitter/Bullet/Components/Targetable/Health
//			MissileParts = &~/Components/Emitter/ResourcesUsed
//		}
//	}
